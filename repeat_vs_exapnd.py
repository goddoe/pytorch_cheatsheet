import torch

A = torch.range(1, 2*3*4).view(2, 3, 4)
"""
tensor([[[ 0.,  1.,  2.,  3.],
         [ 4.,  5.,  6.,  7.],
         [ 8.,  9., 10., 11.]],

        [[12., 13., 14., 15.],
         [16., 17., 18., 19.],
         [20., 21., 22., 23.]]])
"""

Ar_1 = A.repeat(2, 1, 1)
Ae_1 = A.unsqueeze(0).expand(2, -1, -1, -1).contiguous().view(4, 3, 4)
assert torch.equal(Ar_1, Ae_1)
"""
tensor([[[ 0.,  1.,  2.,  3.],
         [ 4.,  5.,  6.,  7.],
         [ 8.,  9., 10., 11.]],

        [[12., 13., 14., 15.],
         [16., 17., 18., 19.],
         [20., 21., 22., 23.]],

        [[ 0.,  1.,  2.,  3.],
         [ 4.,  5.,  6.,  7.],
         [ 8.,  9., 10., 11.]],

        [[12., 13., 14., 15.],
         [16., 17., 18., 19.],
         [20., 21., 22., 23.]]])
"""

Ar_2 = A.repeat(1, 2, 1)
Ae_2 = A.unsqueeze(1).expand(-1, 2, -1, -1).contiguous().view(2, 6, 4)
assert torch.equal(Ar_2, Ae_2)
"""
tensor([[[ 0.,  1.,  2.,  3.],
         [ 4.,  5.,  6.,  7.],
         [ 8.,  9., 10., 11.],
         [ 0.,  1.,  2.,  3.],
         [ 4.,  5.,  6.,  7.],
         [ 8.,  9., 10., 11.]],

        [[12., 13., 14., 15.],
         [16., 17., 18., 19.],
         [20., 21., 22., 23.],
         [12., 13., 14., 15.],
         [16., 17., 18., 19.],
         [20., 21., 22., 23.]]])
"""

Ar_3 = A.repeat(1, 1, 2)
Ae_3 = A.unsqueeze(2).expand(-1, -1, 2, -1).contiguous().view(2, 3, 8)
assert torch.equal(Ar_3, Ae_3)
"""
tensor([[[ 0.,  1.,  2.,  3.,  0.,  1.,  2.,  3.],
         [ 4.,  5.,  6.,  7.,  4.,  5.,  6.,  7.],
         [ 8.,  9., 10., 11.,  8.,  9., 10., 11.]],

        [[12., 13., 14., 15., 12., 13., 14., 15.],
         [16., 17., 18., 19., 16., 17., 18., 19.],
         [20., 21., 22., 23., 20., 21., 22., 23.]]])
"""

